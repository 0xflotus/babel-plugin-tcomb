{"version":3,"sources":["webpack:///webpack/bootstrap dbbf340e77860383f032","webpack:///./playground/index.js","webpack:///./~/tcomb/index.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;kCCtCc,CAAO;;;;AAErB,UAAS,GAAG,CAAC,CAAW,EAAE,CAAmB,EAAW;AACtD,IAAC,GAAG,mBAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAChB,IAAC,GAAG,mBAAE,IAAI,CAAC,mBAAE,KAAK,CAAC,mBAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEjC,OAAM,GAAG,GAAG,WAAU,CAAC,EAAE,CAAC,EAJ6B;AACvD,YAAO,CAAC,GAAG,CAAC,CAAC;IACd;;AAMC,UAAO,mBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;EACtB;;AALD,QAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,C;;;;;;ACN3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C,uFAAuF,EAAE;AACxI;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA8B;AAC9B;AACA;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA,0DAAyD,qHAAqH,EAAE;AAChL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA4C,mFAAmF,EAAE;AACjI;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAwC,oJAAoJ,EAAE;AAC9L;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gFAA+E,YAAY;AAC3F;AACA;AACA;;AAEA;AACA;AACA,2FAA0F,kBAAkB;AAC5G;AACA;AACA;AACA;;AAEA;AACA;AACA,mFAAkF,gBAAgB;AAClG;AACA;AACA,qCAAoC,SAAS;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8FAA6F,mBAAmB;AAChH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA,wFAAuF,gBAAgB;AACvG,kGAAiG,gBAAgB;AACjH,8FAA6F,gBAAgB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2FAA0F,mBAAmB;AAC7G;AACA;AACA;AACA;;AAEA;AACA,wBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAwC,6HAA6H,EAAE;AACvK;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA4C,uFAAuF,EAAE;AACrI;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;;AAEA;AACA,oDAAmD,sJAAsJ,EAAE;AAC3M,2CAA0C,iIAAiI,EAAE;AAC7K;;AAEA;;AAEA;;AAEA,4BAA2B;AAC3B;AACA;;AAEA;AACA;AACA,4CAA2C,iHAAiH,EAAE;AAC9J;;AAEA,qCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,sIAAsI,EAAE;AACxL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,YAAW;AACX;AACA,IAAG,iBAAiB;AACpB;;AAEA;;AAEA;AACA,yFAAwF,sJAAsJ,EAAE;AAChP,2CAA0C,gIAAgI,EAAE;AAC5K;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yCAAwC,mHAAmH,EAAE;AAC7J,uCAAsC,mBAAmB,EAAE,gBAAgB,gHAAgH,EAAE;AAC7L;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA,kCAAiC;AACjC,wCAAuC,SAAS;AAChD;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yFAAwF,6JAA6J,EAAE;AACvP,2CAA0C,uIAAuI,EAAE;AACnL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,mDAAkD,uFAAuF,EAAE;AAC3I;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uDAAsD;AACtD;AACA;;AAEA;AACA,2CAA0C,6HAA6H,EAAE;AACzK,2CAA0C,+HAA+H,EAAE;AAC3K;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,wCAAuC,6JAA6J,EAAE;AACtM,2CAA0C,8HAA8H,EAAE;AAC1K;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,4CAA2C,0JAA0J,EAAE;AACvM;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6CAA4C,6BAA6B,EAAE;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA,oEAAmE,2IAA2I,EAAE;AAChN,2CAA0C,gIAAgI,EAAE;AAC5K;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4EAA2E,+IAA+I,EAAE;AAC5N;;AAEA;AACA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,2CAA0C,6IAA6I,EAAE;AACzL,gDAA+C,sHAAsH,EAAE;AACvK,2CAA0C,+IAA+I,EAAE;AAC3L;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAwC,uFAAuF,EAAE;AACjI;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,YAAW,+DAA+D;AAC1E;;AAEA;;AAEA;AACA,2CAA0C,4HAA4H,EAAE;AACxK,2CAA0C,8HAA8H,EAAE;AAC1K;;AAEA;AACA;AACA,mCAAkC;;AAElC;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA,2CAA0C,yIAAyI,EAAE;AACrL;;AAEA,2BAA0B;AAC1B,kBAAiB;AACjB,wCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,6CAA4C,4IAA4I,EAAE;AAC1L,+CAA8C,gJAAgJ,EAAE;AAChM,2CAA0C,0IAA0I,EAAE;AACtL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA,4CAA2C,uFAAuF,EAAE;AACpI;;AAEA,2BAA0B;AAC1B,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,YAAW,kEAAkE;AAC7E;;AAEA;AACA;AACA;;AAEA;;AAEA,gDAA+C;;AAE/C;AACA,gDAA+C,uJAAuJ,EAAE;AACxM,+CAA8C,gJAAgJ,EAAE;AAChM,2CAA0C,0IAA0I,EAAE;AACtL;;AAEA;;AAEA;;AAEA,kCAAiC;AACjC;AACA;;AAEA;AACA,+CAA8C,oFAAoF,EAAE;AACpI;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA,0CAAyC,2FAA2F,EAAE;AACtI,iEAAgE,mIAAmI,EAAE;AACrM;;AAEA,0BAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,SAAS;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC,2CAA2C,EAAE;AACrF,8CAA6C,4CAA4C,EAAE;AAC3F,0CAAyC,4CAA4C,EAAE;AACvF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;;AC/hCD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA,6BAA4B,UAAU","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dbbf340e77860383f032\n **/","import t from 'tcomb';\n\nfunction sum(x: t.Number, y: Array<?t.Number>): t.Number {\n  return x + y;\n}\n\nconsole.log(sum(1, [null]));\n\n\n/** WEBPACK FOOTER **\n ** ./playground/index.js\n **/","/*! @preserve\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2015 Giulio Canti\n *\n */\n\n'use strict';\n\n// overrideable by the user\nexports.stringify = function stringify(x) {\n  try { // handle \"Converting circular structure to JSON\" error\n    return JSON.stringify(x, null, 2);\n  }\n  catch (e) {\n    return String(x);\n  }\n};\n\nfunction isNil(x) {\n  return x === null || x === void 0;\n}\n\nfunction isBoolean(x) {\n  return x === true || x === false;\n}\n\nfunction isString(x) {\n  return typeof x === 'string';\n}\n\nfunction isNumber(x) {\n  return typeof x === 'number' && isFinite(x) && !isNaN(x);\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isArray(x) {\n  return x instanceof Array;\n}\n\nfunction isObject(x) {\n  return !isNil(x) && typeof x === 'object' && !isArray(x);\n}\n\nfunction isType(x) {\n  return isFunction(x) && isObject(x.meta);\n}\n\nfunction isStruct(x) {\n  return isType(x) && ( x.meta.kind === 'struct' );\n}\n\nfunction isMaybe(x) {\n  return isType(x) && ( x.meta.kind === 'maybe' );\n}\n\nfunction isUnion(x) {\n  return isType(x) && ( x.meta.kind === 'union' );\n}\n\nfunction isTypeName(name) {\n  return isNil(name) || isString(name);\n}\n\n// returns true if x is an instance of type\nfunction is(x, type) {\n  if (isType(type)) {\n    return type.is(x);\n  }\n  return x instanceof type; // type should be a class constructor\n}\n\n// return true if the type constructor behaves like the identity function (exceptions are the structs)\nfunction isIdentity(type) {\n  if (isType(type)) {\n    return type.meta.identity;\n  }\n  return true; // ES6 classes are identity for tcomb\n}\n\n// creates an instance of a type, handling the optional new operator\nfunction create(type, value, path) {\n  if (isType(type)) {\n    // for structs the new operator is allowed\n    return isStruct(type) ? new type(value, path) : type(value, path);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // here type should be a class constructor and value some instance, just check membership and return the value\n    path = path || [getFunctionName(type)];\n    assert(value instanceof type, function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/'); });\n  }\n\n  return value;\n}\n\nfunction getFunctionName(f) {\n  return f.displayName || f.name || '<function' + f.length + '>';\n}\n\nfunction getTypeName(constructor) {\n  if (isType(constructor)) {\n    return constructor.displayName;\n  }\n  return getFunctionName(constructor);\n}\n\n// overrideable by the user\nexports.fail = function fail(message) {\n  throw new TypeError('[tcomb] ' + message);\n};\n\nfunction assert(guard, message) {\n  if (guard !== true) {\n    if (isFunction(message)) { // handle lazy messages\n      message = message();\n    }\n    else if (isNil(message)) { // use a default message\n      message = 'Assert failed (turn on \"Pause on exceptions\" in your Source panel)';\n    }\n    exports.fail(message);\n  }\n}\n\n// safe mixin, cannot override props unless specified\nfunction mixin(target, source, overwrite) {\n  if (isNil(source)) { return target; }\n  for (var k in source) {\n    if (source.hasOwnProperty(k)) {\n      if (overwrite !== true) {\n        if (process.env.NODE_ENV !== 'production') {\n          assert(!target.hasOwnProperty(k), function () { return 'Invalid call to mixin(target, source, [overwrite]): cannot overwrite property \"' + k + '\" of target object'; });\n        }\n      }\n      target[k] = source[k];\n    }\n  }\n  return target;\n}\n\nfunction forbidNewOperator(x, type) {\n  assert(!(x instanceof type), function () { return 'Cannot use the new operator to instantiate the type ' + getTypeName(type); });\n}\n\nfunction getShallowCopy(x) {\n  if (isArray(x)) {\n    return x.concat();\n  }\n  if (isObject(x)) {\n    return mixin({}, x);\n  }\n  return x;\n}\n\n// immutability helper\nfunction update(instance, spec) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(spec), function () { return 'Invalid argument spec ' + exports.stringify(spec) + ' supplied to function update(instance, spec): expected an object containing commands'; });\n  }\n\n  var value = getShallowCopy(instance);\n  for (var k in spec) {\n    if (spec.hasOwnProperty(k)) {\n      if (update.commands.hasOwnProperty(k)) {\n        return update.commands[k](spec[k], value);\n      }\n      else {\n        value[k] = update(value[k], spec[k]);\n      }\n    }\n  }\n  return value;\n}\n\n// built-in commands\n\nfunction $apply(f, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(f), 'Invalid argument f supplied to immutability helper { $apply: f } (expected a function)');\n  }\n  return f(value);\n}\n\nfunction $push(elements, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper { $push: elements } (expected an array)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $push (expected an array)');\n  }\n  return arr.concat(elements);\n}\n\nfunction $remove(keys, obj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(keys), 'Invalid argument keys supplied to immutability helper { $remove: keys } (expected an array)');\n    assert(isObject(obj), 'Invalid value supplied to immutability helper $remove (expected an object)');\n  }\n  for (var i = 0, len = keys.length; i < len; i++ ) {\n    delete obj[keys[i]];\n  }\n  return obj;\n}\n\nfunction $set(value) {\n  return value;\n}\n\nfunction $splice(splices, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(list(Arr).is(splices), 'Invalid argument splices supplied to immutability helper { $splice: splices } (expected an array of arrays)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $splice (expected an array)');\n  }\n  return splices.reduce(function (acc, splice) {\n    acc.splice.apply(acc, splice);\n    return acc;\n  }, arr);\n}\n\nfunction $swap(config, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(config), 'Invalid argument config supplied to immutability helper { $swap: config } (expected an object)');\n    assert(isNumber(config.from), 'Invalid argument config.from supplied to immutability helper { $swap: config } (expected a number)');\n    assert(isNumber(config.to), 'Invalid argument config.to supplied to immutability helper { $swap: config } (expected a number)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $swap (expected an array)');\n  }\n  var element = arr[config.to];\n  arr[config.to] = arr[config.from];\n  arr[config.from] = element;\n  return arr;\n}\n\nfunction $unshift(elements, arr) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper {$unshift: elements} (expected an array)');\n    assert(isArray(arr), 'Invalid value supplied to immutability helper $unshift (expected an array)');\n  }\n  return elements.concat(arr);\n}\n\nfunction $merge(obj, value) {\n  return mixin(mixin({}, value), obj, true);\n}\n\nupdate.commands = {\n  $apply: $apply,\n  $push: $push,\n  $remove: $remove,\n  $set: $set,\n  $splice: $splice,\n  $swap: $swap,\n  $unshift: $unshift,\n  $merge: $merge\n};\n\nfunction irreducible(name, predicate) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isString(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to irreducible(name, predicate) (expected a string)'; });\n    assert(isFunction(predicate), 'Invalid argument predicate ' + exports.stringify(predicate) + ' supplied to irreducible(name, predicate) (expected a function)');\n  }\n\n  function Irreducible(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Irreducible);\n      path = path || [name];\n      assert(predicate(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return value;\n  }\n\n  Irreducible.meta = {\n    kind: 'irreducible',\n    name: name,\n    identity: true\n  };\n\n  Irreducible.displayName = name;\n\n  Irreducible.is = predicate;\n\n  return Irreducible;\n}\n\nvar Any = irreducible('Any', function () {\n  return true;\n});\n\nvar Nil = irreducible('Nil', isNil);\n\nvar Str = irreducible('String', isString);\n\nvar Num = irreducible('Number', isNumber);\n\nvar Bool = irreducible('Boolean', isBoolean);\n\nvar Arr = irreducible('Array', isArray);\n\nvar Obj = irreducible('Object', isObject);\n\nvar Func = irreducible('Function', isFunction);\n\nvar Err = irreducible('Error', function (x) {\n  return x instanceof Error;\n});\n\nvar Re = irreducible('RegExp', function (x) {\n  return x instanceof RegExp;\n});\n\nvar Dat = irreducible('Date', function (x) {\n  return x instanceof Date;\n});\n\nfunction struct(props, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(dict(Str, Func).is(props), function () { return 'Invalid argument props ' + exports.stringify(props) + ' supplied to struct(props, [name]) combinator (expected a dictionary String -> Type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to struct(props, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || struct.getDefaultName(props);\n\n  function Struct(value, path) {\n\n    if (Struct.is(value)) { // implements idempotency\n      return value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an object)'; });\n    }\n\n    if (!(this instanceof Struct)) { // `new` is optional\n      return new Struct(value);\n    }\n\n    for (var k in props) {\n      if (props.hasOwnProperty(k)) {\n        var expected = props[k];\n        var actual = value[k];\n        this[k] = create(expected, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + getTypeName(expected)) : null ));\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(this);\n    }\n\n  }\n\n  Struct.meta = {\n    kind: 'struct',\n    props: props,\n    name: name,\n    identity: false\n  };\n\n  Struct.displayName = displayName;\n\n  Struct.is = function (x) {\n    return x instanceof Struct;\n  };\n\n  Struct.update = function (instance, spec) {\n    return new Struct(exports.update(instance, spec));\n  };\n\n  Struct.extend = function (structs, name) {\n    var props = {};\n    var prototype = {};\n    [Struct].concat(structs).forEach(function (struct, i) {\n      if (isObject(struct)) {\n        mixin(props, struct);\n      }\n      else {\n        if (process.env.NODE_ENV !== 'production') {\n          assert(isStruct(struct), function () { return 'Invalid argument structs[' + i + '] ' + exports.stringify(struct) + ' supplied to ' + displayName + '.extend(structs, name)'; });\n        }\n        mixin(props, struct.meta.props);\n        mixin(prototype, struct.prototype);\n      }\n    });\n    var ret = struct(props, name);\n    mixin(ret.prototype, prototype);\n    return ret;\n  };\n\n  return Struct;\n}\n\nstruct.getDefaultName = function (props) {\n  return '{' + Object.keys(props).map(function (prop) {\n    return prop + ': ' + getTypeName(props[prop]);\n  }).join(', ') + '}';\n};\n\nfunction union(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () { return 'Invalid argument types ' + exports.stringify(types) + ' supplied to union(types, [name]) combinator (expected an array of at least 2 types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to union(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || union.getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Union(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    var type = Union.dispatch(value);\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Union);\n      path = path || [displayName];\n      assert(isType(type), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/') + ' (no constructor found)'; });\n      assert(types.some(function (t) { return t === type; }), function () { return 'Invalid constructor ' + getTypeName(type) + ' returned by ' + path.join('/') + '.dispatch(x) function'; });\n      path[path.length - 1] += '(' + getTypeName(type) + ')';\n    }\n\n    return create(type, value, path);\n  }\n\n  Union.meta = {\n    kind: 'union',\n    types: types,\n    name: name,\n    identity: identity\n  };\n\n  Union.displayName = displayName;\n\n  Union.is = function (x) {\n    return types.some(function (type) {\n      return is(x, type);\n    });\n  };\n\n  Union.dispatch = function (x) { // default dispatch implementation\n    for (var i = 0, len = types.length; i < len; i++ ) {\n      var type = types[i];\n      if (isUnion(type)) { // handle union of unions\n        var t = type.dispatch(x);\n        if (!isNil(t)) {\n          return t;\n        }\n      }\n      else if (is(x, type)) {\n        return type;\n      }\n    }\n  };\n\n  Union.update = function (instance, spec) {\n    return Union(exports.update(instance, spec));\n  };\n\n  return Union;\n}\n\nunion.getDefaultName = function (types) {\n  return types.map(getTypeName).join(' | ');\n};\n\nfunction intersection(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () { return 'Invalid argument types ' + exports.stringify(types) + ' supplied to intersection(types, [name]) combinator (expected an array of at least 2 types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to intersection(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || intersection.getDefaultName(types);\n\n  function Intersection(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Intersection);\n      path = path || [displayName];\n      assert(Intersection.is(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return value;\n  }\n\n  Intersection.meta = {\n    kind: 'intersection',\n    types: types,\n    name: name,\n    identity: true\n  };\n\n  Intersection.displayName = displayName;\n\n  Intersection.is = function (x) {\n    return types.every(function (type) {\n      return is(x, type);\n    });\n  };\n\n  Intersection.update = function (instance, spec) {\n    return Intersection(exports.update(instance, spec));\n  };\n\n  return Intersection;\n}\n\nintersection.getDefaultName = function (types) {\n  return types.map(getTypeName).join(' & ');\n};\n\nfunction maybe(type, name) {\n\n  if (isMaybe(type) || type === Any || type === Nil) { // makes the combinator idempotent and handle Any, Nil\n    return type;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + exports.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || maybe.getDefaultName(type);\n\n  function Maybe(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Maybe);\n    }\n    return isNil(value) ? null : create(type, value, path);\n  }\n\n  Maybe.meta = {\n    kind: 'maybe',\n    type: type,\n    name: name,\n    identity: isIdentity(type)\n  };\n\n  Maybe.displayName = displayName;\n\n  Maybe.is = function (x) {\n    return isNil(x) || is(x, type);\n  };\n\n  return Maybe;\n}\n\nmaybe.getDefaultName = function (type) {\n  return '?' + getTypeName(type);\n};\n\nfunction enums(map, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isObject(map), function () { return 'Invalid argument map ' + exports.stringify(map) + ' supplied to enums(map, [name]) combinator (expected a dictionary of String -> String | Number)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to enums(map, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || enums.getDefaultName(map);\n\n  function Enums(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Enums);\n      path = path || [displayName];\n      assert(Enums.is(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/') + ' (expected one of ' + exports.stringify(Object.keys(map)) + ')'; });\n    }\n\n    return value;\n  }\n\n  Enums.meta = {\n    kind: 'enums',\n    map: map,\n    name: name,\n    identity: true\n  };\n\n  Enums.displayName = displayName;\n\n  Enums.is = function (x) {\n    return map.hasOwnProperty(x);\n  };\n\n  return Enums;\n}\n\nenums.getDefaultName = function (map) {\n  return Object.keys(map).map(function (k) { return exports.stringify(k); }).join(' | ');\n};\n\nenums.of = function (keys, name) {\n  keys = isString(keys) ? keys.split(' ') : keys;\n  var value = {};\n  keys.forEach(function (k) {\n    value[k] = k;\n  });\n  return enums(value, name);\n};\n\nfunction tuple(types, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction), function () { return 'Invalid argument types ' + exports.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || tuple.getDefaultName(types);\n  var identity = types.every(isIdentity);\n\n  function Tuple(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value) && value.length === types.length, function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')'; });\n    }\n\n    var idempotent = true;\n    var ret = [];\n    for (var i = 0, len = types.length; i < len; i++) {\n      var expected = types[i];\n      var actual = value[i];\n      var instance = create(expected, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + getTypeName(expected)) : null ));\n      idempotent = idempotent && ( actual === instance );\n      ret.push(instance);\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Tuple.meta = {\n    kind: 'tuple',\n    types: types,\n    name: name,\n    identity: identity\n  };\n\n  Tuple.displayName = displayName;\n\n  Tuple.is = function (x) {\n    return isArray(x) &&\n      x.length === types.length &&\n      types.every(function (type, i) {\n        return is(x[i], type);\n      });\n  };\n\n  Tuple.update = function (instance, spec) {\n    return Tuple(exports.update(instance, spec));\n  };\n\n  return Tuple;\n}\n\ntuple.getDefaultName = function (types) {\n  return '[' + types.map(getTypeName).join(', ') + ']';\n};\n\nfunction refinement(type, predicate, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + exports.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)'; });\n    assert(isFunction(predicate), function () { return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || refinement.getDefaultName(type, predicate);\n  var identity = isIdentity(type);\n\n  function Refinement(value, path) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      forbidNewOperator(this, Refinement);\n      path = path || [displayName];\n    }\n\n    var x = create(type, value, path);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(predicate(x), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    return x;\n  }\n\n  Refinement.meta = {\n    kind: 'subtype',\n    type: type,\n    predicate: predicate,\n    name: name,\n    identity: identity\n  };\n\n  Refinement.displayName = displayName;\n\n  Refinement.is = function (x) {\n    return is(x, type) && predicate(x);\n  };\n\n  Refinement.update = function (instance, spec) {\n    return Refinement(exports.update(instance, spec));\n  };\n\n  return Refinement;\n}\n\nrefinement.getDefaultName = function (type, predicate) {\n  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';\n};\n\nfunction list(type, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () { return 'Invalid argument type ' + exports.stringify(type) + ' supplied to list(type, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to list(type, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || list.getDefaultName(type);\n  var typeNameCache = getTypeName(type);\n  var identity = isIdentity(type); // the list is identity iif type is identity\n\n  function List(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of ' + typeNameCache + ')'; });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n    var ret = []; // make a temporary copy, will be discarded if idempotent remains true\n    for (var i = 0, len = value.length; i < len; i++ ) {\n      var actual = value[i];\n      var instance = create(type, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + typeNameCache) : null ));\n      idempotent = idempotent && ( actual === instance );\n      ret.push(instance);\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  List.meta = {\n    kind: 'list',\n    type: type,\n    name: name,\n    identity: identity\n  };\n\n  List.displayName = displayName;\n\n  List.is = function (x) {\n    return isArray(x) && x.every(function (e) {\n      return is(e, type);\n    });\n  };\n\n  List.update = function (instance, spec) {\n    return List(exports.update(instance, spec));\n  };\n\n  return List;\n}\n\nlist.getDefaultName = function (type) {\n  return 'Array<' + getTypeName(type) + '>';\n};\n\nfunction dict(domain, codomain, name) {\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(domain), function () { return 'Invalid argument domain ' + exports.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isFunction(codomain), function () { return 'Invalid argument codomain ' + exports.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || dict.getDefaultName(domain, codomain);\n  var domainNameCache = getTypeName(domain);\n  var codomainNameCache = getTypeName(codomain);\n  var identity = isIdentity(domain) && isIdentity(codomain);\n\n  function Dict(value, path) {\n\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + path.join('/'); });\n    }\n\n    var idempotent = true; // will remain true if I can reutilise the input\n    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true\n    for (var k in value) {\n      if (value.hasOwnProperty(k)) {\n        k = create(domain, k, ( process.env.NODE_ENV !== 'production' ? path.concat(domainNameCache) : null ));\n        var actual = value[k];\n        var instance = create(codomain, actual, ( process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + codomainNameCache) : null ));\n        idempotent = idempotent && ( actual === instance );\n        ret[k] = instance;\n      }\n    }\n\n    if (idempotent) { // implements idempotency\n      ret = value;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n\n    return ret;\n  }\n\n  Dict.meta = {\n    kind: 'dict',\n    domain: domain,\n    codomain: codomain,\n    name: name,\n    identity: identity\n  };\n\n  Dict.displayName = displayName;\n\n  Dict.is = function (x) {\n    if (!isObject(x)) {\n      return false;\n    }\n    for (var k in x) {\n      if (x.hasOwnProperty(k)) {\n        if (!is(k, domain) || !is(x[k], codomain)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  Dict.update = function (instance, spec) {\n    return Dict(exports.update(instance, spec));\n  };\n\n  return Dict;\n}\n\ndict.getDefaultName = function (domain, codomain) {\n  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';\n};\n\nfunction isInstrumented(f) {\n  return isFunction(f) && isObject(f.instrumentation);\n}\n\nfunction func(domain, codomain, name) {\n\n  domain = isArray(domain) ? domain : [domain]; // handle handy syntax for unary functions\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(list(Func).is(domain), function () { return 'Invalid argument domain ' + exports.stringify(domain) + ' supplied to func(domain, codomain, [name]) combinator (expected an array of types)'; });\n    assert(isFunction(codomain), function () { return 'Invalid argument codomain ' + exports.stringify(codomain) + ' supplied to func(domain, codomain, [name]) combinator (expected a type)'; });\n    assert(isTypeName(name), function () { return 'Invalid argument name ' + exports.stringify(name) + ' supplied to func(domain, codomain, [name]) combinator (expected a string)'; });\n  }\n\n  var displayName = name || func.getDefaultName(domain, codomain);\n\n  function FuncType(value, curried) {\n\n    if (!isInstrumented(value)) { // automatically instrument the function\n      return FuncType.of(value, curried);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(FuncType.is(value), function () { return 'Invalid value ' + exports.stringify(value) + ' supplied to ' + displayName; });\n    }\n\n    return value;\n  }\n\n  FuncType.meta = {\n    kind: 'func',\n    domain: domain,\n    codomain: codomain,\n    name: name\n  };\n\n  FuncType.displayName = displayName;\n\n  FuncType.is = function (x) {\n    return isInstrumented(x) &&\n      x.instrumentation.domain.length === domain.length &&\n      x.instrumentation.domain.every(function (type, i) {\n        return type === domain[i];\n      }) &&\n      x.instrumentation.codomain === codomain;\n  };\n\n  FuncType.of = function (f, curried) {\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(isFunction(f), function () { return 'Invalid argument f supplied to func.of ' + displayName + ' (expected a function)'; });\n      assert(isNil(curried) || isBoolean(curried), function () { return 'Invalid argument curried ' + exports.stringify(curried) + ' supplied to func.of ' + displayName + ' (expected a boolean)'; });\n    }\n\n    if (FuncType.is(f)) { // makes FuncType.of idempotent\n      return f;\n    }\n\n    function fn() {\n      var args = Array.prototype.slice.call(arguments);\n      var len = curried ?\n        args.length :\n        domain.length;\n      var argsType = tuple(domain.slice(0, len));\n\n      args = argsType(args); // type check arguments\n\n      if (len === domain.length) {\n        return create(codomain, f.apply(this, args));\n      }\n      else {\n        var g = Function.prototype.bind.apply(f, [this].concat(args));\n        var newdomain = func(domain.slice(len), codomain);\n        return newdomain.of(g, curried);\n      }\n    }\n\n    fn.instrumentation = {\n      domain: domain,\n      codomain: codomain,\n      f: f\n    };\n\n    fn.displayName = getFunctionName(f);\n\n    return fn;\n\n  };\n\n  return FuncType;\n\n}\n\nfunc.getDefaultName = function (domain, codomain) {\n  return '(' + domain.map(getTypeName).join(', ') + ') => ' + getTypeName(codomain);\n};\n\nfunction match(x) {\n  var type, guard, f, count;\n  for (var i = 1, len = arguments.length; i < len; ) {\n    type = arguments[i];\n    guard = arguments[i + 1];\n    f = arguments[i + 2];\n\n    if (isFunction(f) && !isType(f)) {\n      i = i + 3;\n    }\n    else {\n      f = guard;\n      guard = Any.is;\n      i = i + 2;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      count = (count || 0) + 1;\n      assert(isType(type), function () { return 'Invalid type in clause #' + count; });\n      assert(isFunction(guard), function () { return 'Invalid guard in clause #' + count; });\n      assert(isFunction(f), function () { return 'Invalid block in clause #' + count; });\n    }\n\n    if (type.is(x) && guard(x)) {\n      return f(x);\n    }\n  }\n  exports.fail('Match error');\n}\n\nmixin(exports, {\n  is: is,\n  isType: isType,\n  getTypeName: getTypeName,\n  mixin: mixin,\n  update: update,\n  assert: assert,\n  Any: Any,\n  Nil: Nil,\n  Str: Str, // deprecated\n  String: Str,\n  Num: Num, // deprecated\n  Number: Num,\n  Bool: Bool, // deprecated\n  Boolean: Bool,\n  Arr: Arr, // deprecated\n  Array: Arr,\n  Obj: Obj, // deprecated\n  Object: Obj,\n  Func: Func, // deprecated\n  Function: Func,\n  Err: Err, // deprecated\n  Error: Err,\n  Re: Re, // deprecated\n  RegExp: Re,\n  Dat: Dat, // deprecated\n  Date: Dat,\n  irreducible: irreducible,\n  struct: struct,\n  enums: enums,\n  union: union,\n  maybe: maybe,\n  tuple: tuple,\n  subtype: refinement, // deprecated\n  refinement: refinement,\n  list: list,\n  dict: dict,\n  func: func,\n  intersection: intersection,\n  match: match\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/tcomb/index.js\n ** module id = 1\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}